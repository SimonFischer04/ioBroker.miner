{
  "version": 3,
  "sources": ["../../../src/lib/utils/socket-utils.ts"],
  "sourcesContent": ["import {Socket} from 'node:net';\nimport {Logger} from '../miner/model/Logger';\n\n/**\n * Utility function to send a command to a socket server (and wait for a response - if expected)\n * (connection is closed after the response is received or after a timeout)\n *\n * @param logger - logger to use\n * @param host - host to connect to\n * @param port - port to connect to\n * @param data - data to send\n * @param expectResponse - whether to expect a response\n */\nexport async function sendSocketCommand<T = void>(\n    logger: Logger,\n    host: string,\n    port: number,\n    data: object,\n    expectResponse: boolean = true\n): Promise<T> {\n    logger.debug(`sendCommand: ${JSON.stringify(data)}`);\n\n    let handled = false;\n    const socket: Socket = new Socket();\n\n    return new Promise<T>((resolve, reject) => {\n        socket.on('connect', () => {\n            const cmd = JSON.stringify(data) + '\\n';\n            logger.debug(`connected, sending cmd now ...: ${cmd}`);\n            socket.write(cmd, (err) => {\n                if (err) {\n                    logger.error(err.message);\n                    reject(err.message);\n                } else {\n                    if (!expectResponse) {\n                        resolve(undefined as T);\n                    }\n                }\n            });\n        });\n\n        socket.on('timeout', () => {\n\n            logger.warn('socket timeout');\n            reject('socket timeout');\n        });\n\n        socket.on('data', (data) => {\n            const d = JSON.parse(data.toString());\n\n            logger.debug(`received: ${data.toString()}`);\n\n            resolve(d as T);\n        });\n\n        socket.on('close', () => {\n        }); // discard\n\n        socket.on('error', (err) => {\n            logger.error(err.message);\n            reject(`socket error: ${err.message}`);\n        });\n\n        socket.setTimeout(3000);\n        socket.connect(port, host);\n\n        // socket timeout alone does is not enough\n        setTimeout(() => {\n            if (!handled) {\n                const msg = `timeout handling socket command: ${JSON.stringify(data)}. maybe the password is wrong?`;\n                logger.warn(msg);\n                reject(msg);\n            }\n        }, 3000)\n    }).finally(() => {\n        handled = true;\n        socket.end();\n        socket.destroy();\n    });\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqB;AAarB,eAAsB,kBAClB,QACA,MACA,MACA,MACA,iBAA0B,MAChB;AACV,SAAO,MAAM,gBAAgB,KAAK,UAAU,IAAI,CAAC,EAAE;AAEnD,MAAI,UAAU;AACd,QAAM,SAAiB,IAAI,uBAAO;AAElC,SAAO,IAAI,QAAW,CAAC,SAAS,WAAW;AACvC,WAAO,GAAG,WAAW,MAAM;AACvB,YAAM,MAAM,KAAK,UAAU,IAAI,IAAI;AACnC,aAAO,MAAM,mCAAmC,GAAG,EAAE;AACrD,aAAO,MAAM,KAAK,CAAC,QAAQ;AACvB,YAAI,KAAK;AACL,iBAAO,MAAM,IAAI,OAAO;AACxB,iBAAO,IAAI,OAAO;AAAA,QACtB,OAAO;AACH,cAAI,CAAC,gBAAgB;AACjB,oBAAQ,MAAc;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAED,WAAO,GAAG,WAAW,MAAM;AAEvB,aAAO,KAAK,gBAAgB;AAC5B,aAAO,gBAAgB;AAAA,IAC3B,CAAC;AAED,WAAO,GAAG,QAAQ,CAACA,UAAS;AACxB,YAAM,IAAI,KAAK,MAAMA,MAAK,SAAS,CAAC;AAEpC,aAAO,MAAM,aAAaA,MAAK,SAAS,CAAC,EAAE;AAE3C,cAAQ,CAAM;AAAA,IAClB,CAAC;AAED,WAAO,GAAG,SAAS,MAAM;AAAA,IACzB,CAAC;AAED,WAAO,GAAG,SAAS,CAAC,QAAQ;AACxB,aAAO,MAAM,IAAI,OAAO;AACxB,aAAO,iBAAiB,IAAI,OAAO,EAAE;AAAA,IACzC,CAAC;AAED,WAAO,WAAW,GAAI;AACtB,WAAO,QAAQ,MAAM,IAAI;AAGzB,eAAW,MAAM;AACb,UAAI,CAAC,SAAS;AACV,cAAM,MAAM,oCAAoC,KAAK,UAAU,IAAI,CAAC;AACpE,eAAO,KAAK,GAAG;AACf,eAAO,GAAG;AAAA,MACd;AAAA,IACJ,GAAG,GAAI;AAAA,EACX,CAAC,EAAE,QAAQ,MAAM;AACb,cAAU;AACV,WAAO,IAAI;AACX,WAAO,QAAQ;AAAA,EACnB,CAAC;AACL;",
  "names": ["data"]
}
