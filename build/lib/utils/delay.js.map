{
  "version": 3,
  "sources": ["../../../src/lib/utils/delay.ts"],
  "sourcesContent": ["export async function delay(ms: number): Promise<unknown> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function asyncIntervalNoWait(asyncCallback: () => Promise<void>, executeEveryMs?: number): NodeJS.Timeout {\n    return setInterval(() => {\n        // make eslint not complain about no-misused-promises\n        // because it is expected here that one callback may not complete (before another one start)\n        void (async (): Promise<void> => {\n            await asyncCallback();\n        })();\n    }, executeEveryMs);\n}\n\nexport interface AsyncIntervalReturnType {\n    clear: () => void;\n}\n\n/**\n * Utility function to create an \"interval\" with async callback, that waits given ms between executions.\n *\n * @param asyncCallback The async callback function to run\n * @param msBetweenExecutions The amount of ms to wait between executions\n * @param shouldExecuteImmediately Whether to execute the callback immediately or after the specified delay\n * @returns An object with a `clear` method to stop the interval\n */\nexport function asyncInterval(\n    asyncCallback: () => Promise<void>,\n    msBetweenExecutions?: number,\n    shouldExecuteImmediately = false\n): AsyncIntervalReturnType {\n    let timeout: NodeJS.Timeout | undefined;\n\n    const callbackWrapper = (): void => {\n        // make eslint not complain about no-misused-promises\n        // recursive setTimeout makes sure callback is completed before next execution\n        void (async (): Promise<void> => {\n            await asyncCallback();\n            timeout = setTimeout(callbackWrapper, msBetweenExecutions);\n        })();\n    };\n\n    if (shouldExecuteImmediately) {\n        void (async (): Promise<void> => {\n            await asyncCallback();\n            timeout = setTimeout(callbackWrapper, msBetweenExecutions);\n        })();\n    } else {\n        timeout = setTimeout(callbackWrapper, msBetweenExecutions);\n    }\n\n    return {\n        clear: (): void => {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function asyncTimeout(asyncCallback: () => Promise<void>, ms: number): NodeJS.Timeout {\n    return setTimeout(() => {\n        // make eslint not complain about no-misused-promises\n        void (async (): Promise<void> => {\n            await asyncCallback();\n        })();\n    }, ms);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,MAAM,IAA8B;AACtD,SAAO,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AACzD;AAEO,SAAS,oBAAoB,eAAoC,gBAAyC;AAC7G,SAAO,YAAY,MAAM;AAGrB,UAAM,YAA2B;AAC7B,YAAM,cAAc;AAAA,IACxB,GAAG;AAAA,EACP,GAAG,cAAc;AACrB;AAcO,SAAS,cACZ,eACA,qBACA,2BAA2B,OACJ;AACvB,MAAI;AAEJ,QAAM,kBAAkB,MAAY;AAGhC,UAAM,YAA2B;AAC7B,YAAM,cAAc;AACpB,gBAAU,WAAW,iBAAiB,mBAAmB;AAAA,IAC7D,GAAG;AAAA,EACP;AAEA,MAAI,0BAA0B;AAC1B,UAAM,YAA2B;AAC7B,YAAM,cAAc;AACpB,gBAAU,WAAW,iBAAiB,mBAAmB;AAAA,IAC7D,GAAG;AAAA,EACP,OAAO;AACH,cAAU,WAAW,iBAAiB,mBAAmB;AAAA,EAC7D;AAEA,SAAO;AAAA,IACH,OAAO,MAAY;AACf,mBAAa,OAAO;AAAA,IACxB;AAAA,EACJ;AACJ;AAEO,SAAS,aAAa,eAAoC,IAA4B;AACzF,SAAO,WAAW,MAAM;AAEpB,UAAM,YAA2B;AAC7B,YAAM,cAAc;AAAA,IACxB,GAAG;AAAA,EACP,GAAG,EAAE;AACT;",
  "names": []
}
