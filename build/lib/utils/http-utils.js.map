{
  "version": 3,
  "sources": ["../../../src/lib/utils/http-utils.ts"],
  "sourcesContent": ["import {Logger} from '../miner/model/Logger';\n\n// TODO: ignore cert support\nexport async function sendGenericHTTPRequest<T>(\n    protocol: 'http' | 'https',\n    host: string,\n    port: number,\n    password: string, // password / api-token\n    logger: Logger,\n    endpoint: string,\n    httpMethod: string,\n    body?: object\n): Promise<T> {\n    try {\n        const response = await fetch(`${protocol}://${host}:${port}/${endpoint}`, {\n            method: httpMethod,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${password}`\n            },\n            body: (body ? JSON.stringify(body) : null)\n        })\n\n        if (response.status !== 200) {\n            const error = `Error sending JSON-RPC command: ${response.statusText}`;\n            logger.error(error);\n            return Promise.reject(error);\n        }\n\n        return await response.json() as T;\n    } catch (e) {\n        logger.error(`Error sending HTTP request: ${e}`);\n        return Promise.reject(e);\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,eAAsB,uBAClB,UACA,MACA,MACA,UACA,QACA,UACA,YACA,MACU;AACV,MAAI;AACA,UAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,MAAM,IAAI,IAAI,IAAI,IAAI,QAAQ,IAAI;AAAA,MACtE,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,iBAAiB,UAAU,QAAQ;AAAA,MACvC;AAAA,MACA,MAAO,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,IACzC,CAAC;AAED,QAAI,SAAS,WAAW,KAAK;AACzB,YAAM,QAAQ,mCAAmC,SAAS,UAAU;AACpE,aAAO,MAAM,KAAK;AAClB,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC/B;AAEA,WAAO,MAAM,SAAS,KAAK;AAAA,EAC/B,SAAS,GAAG;AACR,WAAO,MAAM,+BAA+B,CAAC,EAAE;AAC/C,WAAO,QAAQ,OAAO,CAAC;AAAA,EAC3B;AACJ;",
  "names": []
}
