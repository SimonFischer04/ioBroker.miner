{
  "version": 3,
  "sources": ["../../../../src/lib/miner/miner/SGMiner.ts"],
  "sourcesContent": ["import {SGMinerSettings} from '../model/MinerSettings';\nimport {PollingMiner} from './PollingMiner';\nimport {MinerStats} from '../model/MinerStats';\nimport { MinerFeatureKey } from '../model/MinerFeature';\nimport {sendSocketCommand} from '../../utils/socket-utils';\n\n// https://github.com/ckolivas/cgminer/blob/master/API-README\nenum SGMinerCommand {\n    stats = 'summary+coin'\n}\n\nexport class SGMiner extends PollingMiner<SGMinerSettings> {\n    public override async init(): Promise<void> {\n        await super.init();\n        // sgminer/cgminer api does not support persistent connections (socket is closed after each command), so don't need to init any connection here\n        return Promise.resolve();\n    }\n\n    public override start(): Promise<void> {\n        this.logger.error('start() not (yet) implemented');\n        return Promise.resolve();\n    }\n\n    public override async fetchStats(): Promise<MinerStats> {\n        try{\n            const response =  await this.sendCommand<object>(SGMinerCommand.stats, '', true);\n            // TODO: parse response => actually return stats\n\n            return {\n                raw: response\n            }\n        } catch (e) { // forward error\n            return Promise.reject(e);\n        }\n    }\n\n    public override stop(): Promise<void> {\n        this.logger.error('stop() not (yet) implemented');\n        return Promise.resolve();\n    }\n\n    public getSupportedFeatures(): MinerFeatureKey[] {\n        return [\n            MinerFeatureKey.rawStats\n        ]\n    }\n\n    public override getLoggerName(): string {\n        return `${super.getLoggerName()}SGMiner[${this.settings.host}:${this.settings.port}]`;\n    }\n\n    public getCliArgs(): string[] {\n        return [\n            '--api_listen=0.0.0.0:4028'\n        ]\n    }\n\n    private async sendCommand<T = void>(command: SGMinerCommand, parameter: string = '', expectResponse: boolean = true): Promise<T> {\n        return sendSocketCommand(this.logger, this.settings.host, this.settings.port, {\n            command,\n            parameter\n        }, expectResponse);\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA2B;AAE3B,0BAAgC;AAChC,0BAAgC;AAGhC,IAAK,iBAAL,kBAAKA,oBAAL;AACI,EAAAA,gBAAA,WAAQ;AADP,SAAAA;AAAA,GAAA;AAIE,MAAM,gBAAgB,iCAA8B;AAAA,EACvD,MAAsB,OAAsB;AACxC,UAAM,MAAM,KAAK;AAEjB,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EAEgB,QAAuB;AACnC,SAAK,OAAO,MAAM,+BAA+B;AACjD,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EAEA,MAAsB,aAAkC;AACpD,QAAG;AACC,YAAM,WAAY,MAAM,KAAK,YAAoB,4BAAsB,IAAI,IAAI;AAG/E,aAAO;AAAA,QACH,KAAK;AAAA,MACT;AAAA,IACJ,SAAS,GAAG;AACR,aAAO,QAAQ,OAAO,CAAC;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEgB,OAAsB;AAClC,SAAK,OAAO,MAAM,8BAA8B;AAChD,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EAEO,uBAA0C;AAC7C,WAAO;AAAA,MACH,oCAAgB;AAAA,IACpB;AAAA,EACJ;AAAA,EAEgB,gBAAwB;AACpC,WAAO,GAAG,MAAM,cAAc,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,IAAI;AAAA,EACtF;AAAA,EAEO,aAAuB;AAC1B,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,YAAsB,SAAyB,YAAoB,IAAI,iBAA0B,MAAkB;AAC7H,eAAO,uCAAkB,KAAK,QAAQ,KAAK,SAAS,MAAM,KAAK,SAAS,MAAM;AAAA,MAC1E;AAAA,MACA;AAAA,IACJ,GAAG,cAAc;AAAA,EACrB;AACJ;",
  "names": ["SGMinerCommand"]
}
