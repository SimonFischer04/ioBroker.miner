{
  "version": 3,
  "sources": ["../../../../src/lib/miner/miner/TeamRedMiner.ts"],
  "sourcesContent": ["import {PollingMiner} from './PollingMiner';\nimport {TeamRedMinerSettings} from '../model/MinerSettings';\nimport {ClaymoreMiner} from './ClaymoreMiner';\nimport {SGMiner} from './SGMiner';\nimport {MinerStats} from '../model/MinerStats';\nimport { MinerFeatureKey } from '../model/MinerFeature';\n\nexport class TeamRedMiner extends PollingMiner<TeamRedMinerSettings> {\n    // TODO: actually does not support full claymore api\n    // TODO: sgminer api\n\n    private readonly claymoreMiner: ClaymoreMiner\n    private readonly sgMiner: SGMiner;\n\n    constructor(settings: TeamRedMinerSettings) {\n        super(settings);\n\n        if (settings.pollInterval !== settings.sg.pollInterval || settings.pollInterval !== settings.claymore.pollInterval) {\n            throw new Error('pollInterval must be the same for all miners');\n        }\n\n        this.claymoreMiner = new ClaymoreMiner(settings.claymore);\n        this.sgMiner = new SGMiner(settings.sg);\n    }\n\n    public override async init(): Promise<void> {\n        await super.init();\n\n        // DO NOT CALL sub-miner.init() here, as it will init the polling interval, but trm is PollingMiner itself (own interval) => calls fetchData() for both miners itself and merges the results\n        // await this.claymoreMiner.init();\n    }\n\n    public override async start(): Promise<void> {\n        await this.claymoreMiner.start();\n    }\n\n    public override async fetchStats(): Promise<MinerStats> {\n        const claymoreStats: MinerStats = await this.claymoreMiner.fetchStats();\n        // await this.sgMiner.fetchData()\n        return claymoreStats;\n    }\n\n    public override async stop(): Promise<void> {\n        await this.claymoreMiner.stop();\n    }\n\n    public override async close(): Promise<void> {\n        await this.claymoreMiner.close();\n    }\n\n    public getSupportedFeatures(): MinerFeatureKey[] {\n        return [\n            ...this.claymoreMiner.getSupportedFeatures()\n        ]\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA2B;AAE3B,2BAA4B;AAC5B,qBAAsB;AAIf,MAAM,qBAAqB,iCAAmC;AAAA;AAAA;AAAA,EAIhD;AAAA,EACA;AAAA,EAEjB,YAAY,UAAgC;AACxC,UAAM,QAAQ;AAEd,QAAI,SAAS,iBAAiB,SAAS,GAAG,gBAAgB,SAAS,iBAAiB,SAAS,SAAS,cAAc;AAChH,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AAEA,SAAK,gBAAgB,IAAI,mCAAc,SAAS,QAAQ;AACxD,SAAK,UAAU,IAAI,uBAAQ,SAAS,EAAE;AAAA,EAC1C;AAAA,EAEA,MAAsB,OAAsB;AACxC,UAAM,MAAM,KAAK;AAAA,EAIrB;AAAA,EAEA,MAAsB,QAAuB;AACzC,UAAM,KAAK,cAAc,MAAM;AAAA,EACnC;AAAA,EAEA,MAAsB,aAAkC;AACpD,UAAM,gBAA4B,MAAM,KAAK,cAAc,WAAW;AAEtE,WAAO;AAAA,EACX;AAAA,EAEA,MAAsB,OAAsB;AACxC,UAAM,KAAK,cAAc,KAAK;AAAA,EAClC;AAAA,EAEA,MAAsB,QAAuB;AACzC,UAAM,KAAK,cAAc,MAAM;AAAA,EACnC;AAAA,EAEO,uBAA0C;AAC7C,WAAO;AAAA,MACH,GAAG,KAAK,cAAc,qBAAqB;AAAA,IAC/C;AAAA,EACJ;AACJ;",
  "names": []
}
