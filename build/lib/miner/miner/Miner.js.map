{
  "version": 3,
  "sources": ["../../../../src/lib/miner/miner/Miner.ts"],
  "sourcesContent": ["import {MinerSettings} from '../model/MinerSettings';\nimport * as crypto from 'node:crypto';\nimport {MinerFeatureKey} from '../model/MinerFeature';\nimport {Logger} from '../model/Logger';\nimport {MinerStats} from '../model/MinerStats';\n\nexport abstract class Miner<S extends MinerSettings> {\n    protected logger: Logger;\n    private statSubscriptions: ((stats: MinerStats) => Promise<void>)[] = [];\n\n    constructor(\n        public readonly settings: S\n    ) {\n        if(!settings.id) {\n            this.settings.id = crypto.randomUUID();\n        }\n        this.logger = Logger.getLogger(this.getLoggerName());\n    }\n\n    /**\n     * Get the features supported by this miner\n     */\n    public abstract getSupportedFeatures(): MinerFeatureKey[];\n\n    /**\n     * Initialize the miner: connect, start polling (for polling miners, ...), ...\n     */\n    public abstract init(): Promise<void>;\n\n    /**\n     * Start mining\n     */\n    public abstract start(): Promise<void>;\n\n    /**\n     * Stop mining\n     */\n    public abstract stop(): Promise<void>;\n\n    /**\n     * Close / cleanup any open resources\n     */\n    public async close(): Promise<void> {\n        this.statSubscriptions = [];\n    };\n\n    /**\n     * Get name to use for the logger\n     */\n    protected getLoggerName(): string {\n        return `Miner[${this.settings.id}, ${this.settings.minerType}]`;\n    };\n\n    /**\n     * Subscribe to miner stats\n     *\n     * @param callback - callback that gets called when new stats are available\n     */\n    public subscribeToStats(callback: (stats: MinerStats) => Promise<void>): void {\n        this.statSubscriptions.push(callback);\n    }\n\n    /**\n     * Called by the miner when new stats are available.\n     * Subscribers will be notified.\n     *\n     * @param stats - the new stats\n     */\n    public async onStats(stats: MinerStats): Promise<void> {\n        this.logger.debug(`publishing new stats to subscribers: ${JSON.stringify(stats)}`);\n        for (const sub of this.statSubscriptions) {\n            await sub(stats);\n        }\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,aAAwB;AAExB,oBAAqB;AAGd,MAAe,MAA+B;AAAA,EAIjD,YACoB,UAClB;AADkB;AAEhB,QAAG,CAAC,SAAS,IAAI;AACb,WAAK,SAAS,KAAK,OAAO,WAAW;AAAA,IACzC;AACA,SAAK,SAAS,qBAAO,UAAU,KAAK,cAAc,CAAC;AAAA,EACvD;AAAA,EAVU;AAAA,EACF,oBAA8D,CAAC;AAAA;AAAA;AAAA;AAAA,EAkCvE,MAAa,QAAuB;AAChC,SAAK,oBAAoB,CAAC;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKU,gBAAwB;AAC9B,WAAO,SAAS,KAAK,SAAS,EAAE,KAAK,KAAK,SAAS,SAAS;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,iBAAiB,UAAsD;AAC1E,SAAK,kBAAkB,KAAK,QAAQ;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,QAAQ,OAAkC;AACnD,SAAK,OAAO,MAAM,wCAAwC,KAAK,UAAU,KAAK,CAAC,EAAE;AACjF,eAAW,OAAO,KAAK,mBAAmB;AACtC,YAAM,IAAI,KAAK;AAAA,IACnB;AAAA,EACJ;AACJ;",
  "names": []
}
