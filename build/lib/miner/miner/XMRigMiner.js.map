{
  "version": 3,
  "sources": ["../../../../src/lib/miner/miner/XMRigMiner.ts"],
  "sourcesContent": ["import {MinerFeatureKey} from '../model/MinerFeature';\nimport {XMRigSettings} from '../model/MinerSettings';\nimport {MinerStats} from '../model/MinerStats';\nimport {PollingMiner} from './PollingMiner';\nimport {sendGenericHTTPRequest} from '../../utils/http-utils';\n\n// TODO: support more endpoints\nenum XMRigEndpoint {\n    jsonRPC = 'json_rpc',\n    summary = '2/summary'\n}\n\n// methods available at the /json_rpc endpoint\n// should be on: https://xmrig.com/docs/miner/api/json_rpc (but actually page is empty currently)\nenum XMRigJsonRPCMethod {\n    pause = 'pause',\n    resume = 'resume',\n    stop = 'stop' // TODO: what does this do? seems to stop the miner, but get automatically resumed after a few seconds\n}\n\ninterface JsonRPCResponse {\n    result: {\n        status: 'OK' | string;\n    };\n    jsonrpc: string;\n    id: string;\n}\n\nexport class XMRigMiner extends PollingMiner<XMRigSettings> {\n    public override async init(): Promise<void> {\n        await super.init();\n        // http is stateless!, so don't need to init any connection here\n        return Promise.resolve();\n    }\n\n    public override async start(): Promise<void> {\n        await this.sendJSONRPCCommand(XMRigJsonRPCMethod.resume);\n    }\n\n    public override async fetchStats(): Promise<MinerStats> {\n        const responseBody = await this.sendHTTPRequest<SummaryResponse>(XMRigEndpoint.summary, 'GET');\n\n        return {\n            raw: responseBody,\n            version: responseBody.version,\n            totalHashrate: responseBody.hashrate.total[0]\n        }\n    }\n\n    public override async stop(): Promise<void> {\n        await this.sendJSONRPCCommand(XMRigJsonRPCMethod.pause);\n    }\n\n    public override getSupportedFeatures(): MinerFeatureKey[] {\n        return [\n            MinerFeatureKey.running,\n            MinerFeatureKey.rawStats,\n            MinerFeatureKey.version,\n            MinerFeatureKey.totalHashrate\n        ]\n    }\n\n    public override getLoggerName(): string {\n        return `${super.getLoggerName()}XMRigMiner[${this.settings.host}:${this.settings.port}]`;\n    }\n\n    public override getCliArgs(): string[] {\n        return [\n            '--http-host ::',\n            `--http-port ${this.settings.port}`,\n            `--http-access-token ${this.settings.password}`,\n            '--http-no-restricted'\n        ];\n    }\n\n    private async sendJSONRPCCommand(rpcMethod: XMRigJsonRPCMethod): Promise<void> {\n        const responseBody = await this.sendHTTPRequest<JsonRPCResponse>(XMRigEndpoint.jsonRPC, 'POST', {\n            method: rpcMethod\n        });\n\n        if (responseBody.result.status !== 'OK') {\n            const error = `Error sending JSON-RPC command: ${JSON.stringify(responseBody)}`;\n            this.logger.error(error);\n            return Promise.reject(error);\n        }\n    }\n\n    private async sendHTTPRequest<T>(endpoint: string, httpMethod: string, body?: object): Promise<T> {\n        // TODO: https support\n        return sendGenericHTTPRequest('http', this.settings.host, this.settings.port, this.settings.password, this.logger, endpoint, httpMethod, body);\n    }\n}\n\ninterface SummaryResponse {\n    version: string;\n    hashrate: {\n        total: [\n            number,\n\n            // other coin hashRates???\n            number,\n            number,\n        ]\n    }\n    // TODO: implement more fields\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA8B;AAG9B,0BAA2B;AAC3B,wBAAqC;AAGrC,IAAK,gBAAL,kBAAKA,mBAAL;AACI,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,aAAU;AAFT,SAAAA;AAAA,GAAA;AAOL,IAAK,qBAAL,kBAAKC,wBAAL;AACI,EAAAA,oBAAA,WAAQ;AACR,EAAAA,oBAAA,YAAS;AACT,EAAAA,oBAAA,UAAO;AAHN,SAAAA;AAAA,GAAA;AAcE,MAAM,mBAAmB,iCAA4B;AAAA,EACxD,MAAsB,OAAsB;AACxC,UAAM,MAAM,KAAK;AAEjB,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EAEA,MAAsB,QAAuB;AACzC,UAAM,KAAK,mBAAmB,qBAAyB;AAAA,EAC3D;AAAA,EAEA,MAAsB,aAAkC;AACpD,UAAM,eAAe,MAAM,KAAK,gBAAiC,2BAAuB,KAAK;AAE7F,WAAO;AAAA,MACH,KAAK;AAAA,MACL,SAAS,aAAa;AAAA,MACtB,eAAe,aAAa,SAAS,MAAM,CAAC;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,MAAsB,OAAsB;AACxC,UAAM,KAAK,mBAAmB,mBAAwB;AAAA,EAC1D;AAAA,EAEgB,uBAA0C;AACtD,WAAO;AAAA,MACH,oCAAgB;AAAA,MAChB,oCAAgB;AAAA,MAChB,oCAAgB;AAAA,MAChB,oCAAgB;AAAA,IACpB;AAAA,EACJ;AAAA,EAEgB,gBAAwB;AACpC,WAAO,GAAG,MAAM,cAAc,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,IAAI;AAAA,EACzF;AAAA,EAEgB,aAAuB;AACnC,WAAO;AAAA,MACH;AAAA,MACA,eAAe,KAAK,SAAS,IAAI;AAAA,MACjC,uBAAuB,KAAK,SAAS,QAAQ;AAAA,MAC7C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,mBAAmB,WAA8C;AAC3E,UAAM,eAAe,MAAM,KAAK,gBAAiC,0BAAuB,QAAQ;AAAA,MAC5F,QAAQ;AAAA,IACZ,CAAC;AAED,QAAI,aAAa,OAAO,WAAW,MAAM;AACrC,YAAM,QAAQ,mCAAmC,KAAK,UAAU,YAAY,CAAC;AAC7E,WAAK,OAAO,MAAM,KAAK;AACvB,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEA,MAAc,gBAAmB,UAAkB,YAAoB,MAA2B;AAE9F,eAAO,0CAAuB,QAAQ,KAAK,SAAS,MAAM,KAAK,SAAS,MAAM,KAAK,SAAS,UAAU,KAAK,QAAQ,UAAU,YAAY,IAAI;AAAA,EACjJ;AACJ;",
  "names": ["XMRigEndpoint", "XMRigJsonRPCMethod"]
}
