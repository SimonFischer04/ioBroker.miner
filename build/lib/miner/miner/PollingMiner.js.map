{
  "version": 3,
  "sources": ["../../../../src/lib/miner/miner/PollingMiner.ts"],
  "sourcesContent": ["import {Miner} from './Miner';\nimport {PollingMinerSettings} from '../model/MinerSettings';\nimport {Logger} from '../model/Logger';\nimport {asyncInterval, AsyncIntervalReturnType} from '../../utils/delay';\n\n// TODO: improve name\nconst logger: Logger = Logger.getLogger('PollingMiner');\n\nexport abstract class PollingMiner<S extends PollingMinerSettings> extends Miner<S> {\n    private pollInterval: AsyncIntervalReturnType | undefined;\n\n    public abstract fetchData(): Promise<void>;\n\n    public override async init(): Promise<void> {\n        logger.info(`initializing with interval ${this.settings.pollInterval}`);\n\n        if (!this.settings.pollInterval || this.settings.pollInterval < 100) {\n            logger.error(`pollInterval >= 100 required. got: ${this.settings.pollInterval}`);\n            return;\n        }\n\n        // start polling\n        this.pollInterval = asyncInterval(async () => {\n            logger.debug('next poll interval time reached. calling fetchData()');\n            await this.fetchData();\n        }, this.settings.pollInterval, true);\n    }\n\n    public override async close(): Promise<void> {\n        this.pollInterval?.clear();\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAoB;AAEpB,oBAAqB;AACrB,mBAAqD;AAGrD,MAAM,SAAiB,qBAAO,UAAU,cAAc;AAE/C,MAAe,qBAAqD,mBAAS;AAAA,EACxE;AAAA,EAIR,MAAsB,OAAsB;AACxC,WAAO,KAAK,8BAA8B,KAAK,SAAS,YAAY,EAAE;AAEtE,QAAI,CAAC,KAAK,SAAS,gBAAgB,KAAK,SAAS,eAAe,KAAK;AACjE,aAAO,MAAM,sCAAsC,KAAK,SAAS,YAAY,EAAE;AAC/E;AAAA,IACJ;AAGA,SAAK,mBAAe,4BAAc,YAAY;AAC1C,aAAO,MAAM,sDAAsD;AACnE,YAAM,KAAK,UAAU;AAAA,IACzB,GAAG,KAAK,SAAS,cAAc,IAAI;AAAA,EACvC;AAAA,EAEA,MAAsB,QAAuB;AA5BjD;AA6BQ,eAAK,iBAAL,mBAAmB;AAAA,EACvB;AACJ;",
  "names": []
}
