{
  "version": 3,
  "sources": ["../../../../src/lib/miner/miner/BOSMiner.ts"],
  "sourcesContent": ["import {PollingMiner} from './PollingMiner';\nimport {BOSMinerSettings} from '../model/MinerSettings';\nimport {MinerStats} from '../model/MinerStats';\nimport {MinerFeatureKey} from '../model/MinerFeature';\nimport {sendSocketCommand} from '../../utils/socket-utils';\n\n// based on cgminer, but with different commands\n// TODO: inherit?\n\n// old braains api (pre grpc): https://academy.braiins.com/en/braiins-os/papi-bosminer/\nenum BOSMinerCommand {\n    stats = 'summary+coin',\n\n    // BOS only commands\n    pause = 'pause',\n    resume = 'resume'\n}\n\nexport class BOSMiner extends PollingMiner<BOSMinerSettings> {\n    public override async start(): Promise<void> {\n        await this.sendCommand(BOSMinerCommand.resume, '', false);\n    }\n\n    public override async fetchStats(): Promise<MinerStats> {\n        try {\n            const response = await this.sendCommand<object>(BOSMinerCommand.stats, '', true);\n            // TODO: parse response => actually return stats\n\n            return {\n                raw: response\n            }\n        } catch (e) { // forward error\n            return Promise.reject(e);\n        }\n    }\n\n    public override async stop(): Promise<void> {\n        await this.sendCommand(BOSMinerCommand.pause, '', false);\n    }\n\n    public override getSupportedFeatures(): MinerFeatureKey[] {\n        return [\n            MinerFeatureKey.running,\n            MinerFeatureKey.rawStats\n        ]\n    }\n\n    public override getLoggerName(): string {\n        return `${super.getLoggerName()}BOSMiner[${this.settings.host}:${this.settings.port}]`;\n    }\n\n    public override getCliArgs(): string[] {\n        return []\n    }\n\n    private async sendCommand<T = void>(command: BOSMinerCommand, parameter: string = '', expectResponse: boolean = true): Promise<T> {\n        return sendSocketCommand(this.logger, this.settings.host, this.settings.port, {\n            command,\n            parameter\n        }, expectResponse);\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA2B;AAG3B,0BAA8B;AAC9B,0BAAgC;AAMhC,IAAK,kBAAL,kBAAKA,qBAAL;AACI,EAAAA,iBAAA,WAAQ;AAGR,EAAAA,iBAAA,WAAQ;AACR,EAAAA,iBAAA,YAAS;AALR,SAAAA;AAAA,GAAA;AAQE,MAAM,iBAAiB,iCAA+B;AAAA,EACzD,MAAsB,QAAuB;AACzC,UAAM,KAAK,YAAY,uBAAwB,IAAI,KAAK;AAAA,EAC5D;AAAA,EAEA,MAAsB,aAAkC;AACpD,QAAI;AACA,YAAM,WAAW,MAAM,KAAK,YAAoB,4BAAuB,IAAI,IAAI;AAG/E,aAAO;AAAA,QACH,KAAK;AAAA,MACT;AAAA,IACJ,SAAS,GAAG;AACR,aAAO,QAAQ,OAAO,CAAC;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,MAAsB,OAAsB;AACxC,UAAM,KAAK,YAAY,qBAAuB,IAAI,KAAK;AAAA,EAC3D;AAAA,EAEgB,uBAA0C;AACtD,WAAO;AAAA,MACH,oCAAgB;AAAA,MAChB,oCAAgB;AAAA,IACpB;AAAA,EACJ;AAAA,EAEgB,gBAAwB;AACpC,WAAO,GAAG,MAAM,cAAc,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,IAAI;AAAA,EACvF;AAAA,EAEgB,aAAuB;AACnC,WAAO,CAAC;AAAA,EACZ;AAAA,EAEA,MAAc,YAAsB,SAA0B,YAAoB,IAAI,iBAA0B,MAAkB;AAC9H,eAAO,uCAAkB,KAAK,QAAQ,KAAK,SAAS,MAAM,KAAK,SAAS,MAAM;AAAA,MAC1E;AAAA,MACA;AAAA,IACJ,GAAG,cAAc;AAAA,EACrB;AACJ;",
  "names": ["BOSMinerCommand"]
}
