{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\nimport MinerAdapterDeviceManagement from './lib/MinerAdapterDeviceManagement';\nimport {categoryKeys} from './lib/miner/model/Category';\nimport {MinerManager} from './lib/miner/miner/MinerManager';\nimport {\n    decryptDeviceSettings,\n    encryptDeviceSettings,\n    IOBrokerDeviceSettings, IOBrokerMinerSettings,\n    isMiner\n} from './miner/model/IOBrokerMinerSettings';\nimport {Level} from './lib/miner/model/Level';\nimport {\n    getMinerFeatureFullId,\n    MinerFeatureCategory,\n    MinerFeatureKey,\n    minerFeatures\n} from './lib/miner/model/MinerFeature';\nimport {createMiner} from './lib/miner/miner/MinerFactory';\nimport {Logger} from './lib/miner/model/Logger';\nimport {Miner} from './lib/miner/miner/Miner';\nimport {MinerSettings} from './lib/miner/model/MinerSettings';\nimport {MinerStats} from './lib/miner/model/MinerStats';\n\nexport class MinerAdapter extends utils.Adapter {\n    private readonly deviceManagement: MinerAdapterDeviceManagement;\n    private readonly minerManager: MinerManager = new MinerManager();\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'miner',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n\n        this.deviceManagement = new MinerAdapterDeviceManagement(this);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.setupMinerLib();\n\n        // Reset the connection indicator during startup\n        await this.setState('info.connection', false, true);\n\n        // Initialize your adapter here\n        await this.createBasicObjectStructure();\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info('aconfig option1: ' + this.config.option1);\n        this.log.info('config option2: ' + this.config.option2);\n        console.log('testABC')\n\n        // try to connect to already known devices\n        await this.tryKnownDevices();\n\n        this.subscribeStates('miner.*.control.*');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            await this.minerManager.closeAll();\n\n            if (this.deviceManagement) {\n                await this.deviceManagement.close();\n            }\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\n            // adapters usually should not process ack=true messages\n            if (state.ack)\n                return\n\n            // example: miner.0.miner.d85ed30e24d3.control.running\n            const parts = id.split('.');\n            if (parts.length < 5) {\n                this.log.error(`invalid state id: ${id}`);\n                return;\n            }\n\n            const deviceObjectId: string = parts.slice(0, 4).join('.');\n            const obj = await this.getObjectAsync(deviceObjectId);\n            if (obj === null || obj === undefined) {\n                this.log.warn(`Object ${deviceObjectId} not found`);\n                return;\n            }\n            const deviceSettings = obj.native as IOBrokerDeviceSettings;\n            if (!isMiner(deviceSettings)) {\n                this.log.warn(`category ${deviceSettings.category} not yet supported`);\n                return;\n            }\n\n            // example: control.running\n            const minerObjectId: string = parts.slice(4).join('.');\n\n            switch (minerObjectId) {\n                case getMinerFeatureFullId(MinerFeatureKey.running): {\n                    this.log.debug(`running state changed to ${state.val}`);\n\n                    if (deviceSettings.settings.id === undefined) {\n                        this.log.error(`device ${deviceSettings.name} has no id`);\n                        return;\n                    }\n\n                    if (state.val) {\n                        await this.minerManager.startMiner(deviceSettings.settings.id);\n                    } else {\n                        await this.minerManager.stopMiner(deviceSettings.settings.id);\n                    }\n                    await this.setState(id, {val: state.val, ack: true});\n                    break;\n                }\n\n                default: {\n                    this.log.warn(`unknown handling of state ${id}`);\n                }\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n\n    private async createBasicObjectStructure(): Promise<void> {\n        for (const key of categoryKeys) {\n            await this.setObjectNotExistsAsync(key, {\n                type: 'folder',\n                common: {\n                    // TODO: translate(key+\"Folder\") oda so\n                    name: key\n                },\n                native: {}\n            });\n        }\n    }\n\n    // Try to initialise and connect to already known devices\n    private async tryKnownDevices(): Promise<void> {\n        const knownDevices = await this.getDevicesAsync();\n\n        for (const device of knownDevices) {\n            await this.initDevice(device);\n        }\n    }\n\n    private async configureDeviceObject(settings: IOBrokerDeviceSettings): Promise<ioBroker.DeviceObject | undefined> {\n        if (!isMiner(settings)) { // TODO: pool support\n            this.log.error(`category ${settings.category} is not yet supported.`);\n            return;\n        }\n\n        // TODO: fill settings.mac using arp request\n        const id = this.getDeviceObjectId(settings);\n\n        this.log.debug(`extended object ${id} with: ${JSON.stringify(settings)}`);\n        await this.extendObject(id, {\n            type: 'device',\n            common: {\n                name: settings.name || settings.settings.host\n            },\n            native: encryptDeviceSettings(settings, (value) => this.encrypt(value))\n        });\n\n        // always add empty state, so that getObjectAsync works\n        await this.extendObject(`${id}.empty`, {\n            type: 'state',\n            common: {\n                name: 'empty',\n                type: 'string',\n                read: true,\n                write: true,\n                expert: true\n            }\n        });\n\n        const obj: ioBroker.DeviceObject = await this.getObjectAsync(id) as ioBroker.DeviceObject;\n        this.log.debug(`configureDeviceObject: ${JSON.stringify(obj)}`);\n\n        return obj;\n    }\n\n    public async addDevice(settings: IOBrokerDeviceSettings): Promise<void> {\n        const obj = await this.configureDeviceObject(settings);\n\n        if (obj == null) {\n            this.log.error(`could not create device object for ${JSON.stringify(settings)}`);\n            return;\n        }\n\n        await this.initDevice(obj);\n    }\n\n\n    public async updateDevice(settings: IOBrokerDeviceSettings): Promise<void> {\n        // PS: don't just delDevice and addDevice, as this would lose all state history, ...\n\n        if (!isMiner(settings)) { // TODO: pool support\n            this.log.error(`category ${settings.category} is not yet supported.`);\n            return;\n        }\n\n        if (!(await this.tryCloseMiner(settings))) {\n            this.log.error(`updateDevice could not close miner ${settings.settings.id}`);\n            return;\n        }\n\n        await this.addDevice(settings);\n    }\n\n    /**\n     * Deletes a device\n     *\n     * @param deviceId - The ioBroker-object-id of the device to delete\n     */\n    public async delDevice(deviceId: string): Promise<boolean> {\n        this.log.info(`deleteDevice device ${deviceId}`);\n        const obj = await this.getObjectAsync(deviceId);\n\n        if (obj == null) {\n            this.log.error(`deleteDevice device ${deviceId} not found`);\n            return false;\n        }\n\n        const settings: IOBrokerDeviceSettings = decryptDeviceSettings(obj.native as IOBrokerDeviceSettings, (value) => this.decrypt(value));\n\n        if (!isMiner(settings)) { // TODO: pool support\n            this.log.error(`deleteDevice category ${obj.native.category} not yet supported`);\n            return false;\n        }\n\n        if (!(await this.tryCloseMiner(settings))) {\n            this.log.error(`delDevice could not close miner ${settings.settings.id}`);\n            return false;\n        }\n\n        await this.delObjectAsync(deviceId, {recursive: true});\n\n        this.log.info(`${deviceId} deleted`);\n        return true;\n    }\n\n    private async tryCloseMiner(settings: IOBrokerMinerSettings): Promise<boolean> {\n        if (settings.settings.id === undefined) {\n            this.log.error('tryCloseMiner: minerId is undefined');\n            return false;\n        }\n\n        if(!settings.enabled){\n            this.log.debug(`tryCloseMiner: skipped miner close, because ${settings.settings.id} is disabled`);\n\n            if(this.minerManager.hasMiner(settings.settings.id)){\n                this.log.error(`tryCloseMiner: this should not happen, miner ${settings.settings.id} is disabled but still in minerManager`);\n                await this.minerManager.close(settings.settings.id);\n            }\n\n            return true;\n        }\n\n        await this.minerManager.close(settings.settings.id);\n        return true;\n    }\n\n    private async initDevice(device: ioBroker.DeviceObject): Promise<void> {\n        const settings: IOBrokerDeviceSettings = decryptDeviceSettings(device.native as IOBrokerDeviceSettings, (value) => this.decrypt(value));\n        this.log.info(`initialising device ${JSON.stringify(settings)}`);\n\n        if (!isMiner(settings)) {\n            this.log.error(`tryKnownDevices category ${settings.category} not yet supported`);\n            return;\n        }\n\n        await this.createDeviceStateObjects(settings);\n\n        if (!settings.enabled) {\n            this.log.info(`device ${settings.name} is disabled`);\n            return;\n        }\n\n        const miner = await this.minerManager.init(settings.settings);\n\n        miner.subscribeToStats(async (stats: MinerStats) => {\n            this.log.debug(`received stats: ${JSON.stringify(stats)}`);\n            await this.processNewStats(miner, settings, stats);\n        });\n    }\n\n    private async processNewStats(miner: Miner<MinerSettings>, settings: IOBrokerDeviceSettings, stats: MinerStats): Promise<void> {\n        for (const feature of miner.getSupportedFeatures()) {\n            // TODO: cleanup, just filter for info features and then directly infer object id from there somehow\n            // change MinerStates to Record<MinerFeatureKey, val>?\n            switch (feature) {\n                case MinerFeatureKey.version: {\n                    await this.setState(this.getStateFullObjectId(settings, MinerFeatureKey.version), {\n                        val: stats.version,\n                        ack: true\n                    });\n                    break;\n                }\n                case MinerFeatureKey.totalHashrate: {\n                    await this.setState(this.getStateFullObjectId(settings, MinerFeatureKey.totalHashrate), {\n                        val: stats.totalHashrate,\n                        ack: true\n                    });\n                    break;\n                }\n            }\n        }\n    }\n\n    private async createDeviceStateObjects(settings: IOBrokerDeviceSettings): Promise<void> {\n        if (!isMiner(settings)) {\n            this.log.error(`createDeviceStateObjects category ${settings.category} not yet supported`);\n            return;\n        }\n\n        await this.extendObject(`${this.getDeviceObjectId(settings)}.${MinerFeatureCategory.control}`, {\n            type: 'channel',\n            common: {\n                name: 'device controls'\n            },\n        });\n\n        await this.extendObject(`${this.getDeviceObjectId(settings)}.${MinerFeatureCategory.info}`, {\n            type: 'channel',\n            common: {\n                name: 'device information'\n            },\n        });\n\n        const dummyMiner = createMiner(settings.settings);\n        for (const featureKey of dummyMiner.getSupportedFeatures()) {\n            const feature = minerFeatures[featureKey];\n            await this.extendObject(`${this.getStateFullObjectId(settings, featureKey)}`, {\n                type: 'state',\n                common: {\n                    name: feature.label,\n                    type: feature.type as ioBroker.CommonType,\n                    read: feature.readable,\n                    write: feature.writable\n                }\n            });\n        }\n    }\n\n    private getDeviceObjectId(settings: IOBrokerDeviceSettings): string {\n        if (!isMiner(settings)) { // TODO: pool support\n            this.log.error(`category ${settings.category} is not yet supported.`);\n            return '<unsupported>';\n        }\n\n        return `${settings.category}.${settings.mac.replace(/:/g, '')}`;\n    }\n\n    private getStateFullObjectId(settings: IOBrokerDeviceSettings, featureKey: MinerFeatureKey): string {\n        return `${this.getDeviceObjectId(settings)}.${getMinerFeatureFullId(featureKey)}`;\n    }\n\n    private setupMinerLib(): void {\n        Logger.setLogger({\n            log: (level, message) => {\n                switch (level) {\n                    case Level.DEBUG:\n                        this.log.debug(message);\n                        break;\n                    case Level.INFO:\n                        this.log.info(message);\n                        break;\n                    case Level.NOTICE:\n                        this.log.info(message);\n                        break;\n                    case Level.WARN:\n                        this.log.warn(message);\n                        break;\n                    case Level.ERROR:\n                        this.log.error(message);\n                        break;\n                    case Level.FATAL:\n                        this.log.error(message);\n                        break;\n                }\n            }\n        })\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MinerAdapter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MinerAdapter())();\n}"],
  "mappings": "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",
  "names": ["MinerAdapterDeviceManagement"]
}
