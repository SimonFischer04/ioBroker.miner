{
  "version": 3,
  "sources": ["../../../src/miner/model/IOBrokerMinerSettings.ts"],
  "sourcesContent": ["import {ClaymoreMinerSettings, MinerSettings, TeamRedMinerSettings} from '../../lib/miner/model/MinerSettings';\nimport {Category, categoryKeys} from '../../lib/miner/model/Category';\nimport {Logger} from '../../lib/miner/model/Logger';\n\nconst logger = Logger.getLogger('IOBrokerMinerSettings');\n\n/*\n    this adapter needs/stores more info per miner than is strictly required if just using the lib, so create su-types\n */\n\n// settings / native part of iobroker 'device'- objects\nexport interface IOBrokerDeviceSettings {\n    category: Category;\n}\n\nexport interface IOBrokerMinerSettings extends IOBrokerDeviceSettings {\n    category: (typeof categoryKeys)[0];\n    name: string;\n    mac: string; // used as object id\n\n    // adapter allows to temporarily disable handling a device (no connection created to the device, controls do nothing, ...)\n    // does not really make sense in a lib context, as then it is also possible to just not initialise the device\n    enabled: boolean;\n\n    settings: MinerSettings;\n}\n\nexport interface IOBrokerPoolSettings extends IOBrokerDeviceSettings {\n    category: (typeof categoryKeys)[1];\n    // TODO\n}\n\n// TODO: check everywhere this is used\nexport function isMiner(settings?: Partial<IOBrokerDeviceSettings>): settings is IOBrokerMinerSettings {\n    return settings?.category === 'miner';\n}\n\n/**\n * Encrypt sensitive data in the settings\n * @param settings - the settings to encrypt\n * @param encryptFunction - the function to encrypt a value\n */\nexport function encryptDeviceSettings(settings: IOBrokerDeviceSettings, encryptFunction: (value: string) => string): IOBrokerDeviceSettings {\n    if (!isMiner(settings)) { // TODO: pool support\n        logger.error(`category ${settings.category} is not yet supported.`);\n        return settings;\n    }\n\n    // TODO: cleaner way to do this?\n    switch (settings.settings.minerType) {\n        case 'teamRedMiner': {\n            const trmSettings = settings.settings as TeamRedMinerSettings;\n            trmSettings.claymore.password = encryptFunction(trmSettings.claymore.password);\n            break;\n        }\n        case 'claymoreMiner': {\n            const claymoreSettings = settings.settings as ClaymoreMinerSettings;\n            claymoreSettings.password = encryptFunction(claymoreSettings.password);\n            break;\n        }\n        default: {\n            break;\n        }\n    }\n\n    return settings;\n}\n\n/**\n * Decrypt sensitive data in the settings\n * @param settings - the settings to decrypt\n * @param decryptFunction - the function to decrypt a value\n */\nexport function decryptDeviceSettings(settings: IOBrokerDeviceSettings, decryptFunction: (value: string) => string): IOBrokerDeviceSettings {\n    if (!isMiner(settings)) { // TODO: pool support\n        logger.error(`category ${settings.category} is not yet supported.`);\n        return settings;\n    }\n\n    // TODO: cleaner way to do this?\n    switch (settings.settings.minerType) {\n        case 'teamRedMiner': {\n            const trmSettings = settings.settings as TeamRedMinerSettings;\n            trmSettings.claymore.password = decryptFunction(trmSettings.claymore.password);\n            break;\n        }\n        case 'claymoreMiner': {\n            const claymoreSettings = settings.settings as ClaymoreMinerSettings;\n            claymoreSettings.password = decryptFunction(claymoreSettings.password);\n            break;\n        }\n        default: {\n            break;\n        }\n    }\n\n    return settings;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAqB;AAErB,MAAM,SAAS,qBAAO,UAAU,uBAAuB;AA6BhD,SAAS,QAAQ,UAA+E;AACnG,UAAO,qCAAU,cAAa;AAClC;AAOO,SAAS,sBAAsB,UAAkC,iBAAoE;AACxI,MAAI,CAAC,QAAQ,QAAQ,GAAG;AACpB,WAAO,MAAM,YAAY,SAAS,QAAQ,wBAAwB;AAClE,WAAO;AAAA,EACX;AAGA,UAAQ,SAAS,SAAS,WAAW;AAAA,IACjC,KAAK,gBAAgB;AACjB,YAAM,cAAc,SAAS;AAC7B,kBAAY,SAAS,WAAW,gBAAgB,YAAY,SAAS,QAAQ;AAC7E;AAAA,IACJ;AAAA,IACA,KAAK,iBAAiB;AAClB,YAAM,mBAAmB,SAAS;AAClC,uBAAiB,WAAW,gBAAgB,iBAAiB,QAAQ;AACrE;AAAA,IACJ;AAAA,IACA,SAAS;AACL;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;AAOO,SAAS,sBAAsB,UAAkC,iBAAoE;AACxI,MAAI,CAAC,QAAQ,QAAQ,GAAG;AACpB,WAAO,MAAM,YAAY,SAAS,QAAQ,wBAAwB;AAClE,WAAO;AAAA,EACX;AAGA,UAAQ,SAAS,SAAS,WAAW;AAAA,IACjC,KAAK,gBAAgB;AACjB,YAAM,cAAc,SAAS;AAC7B,kBAAY,SAAS,WAAW,gBAAgB,YAAY,SAAS,QAAQ;AAC7E;AAAA,IACJ;AAAA,IACA,KAAK,iBAAiB;AAClB,YAAM,mBAAmB,SAAS;AAClC,uBAAiB,WAAW,gBAAgB,iBAAiB,QAAQ;AACrE;AAAA,IACJ;AAAA,IACA,SAAS;AACL;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;",
  "names": []
}
